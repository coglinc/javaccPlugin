apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'jacoco'


sourceCompatibility = 1.6
targetCompatibility = 1.6
group = 'ca.coglinc'
version = '2.0.2-SNAPSHOT'

defaultTasks 'clean', 'build'

repositories {
    mavenCentral()
}

dependencies {
    compile gradleApi()
    compile group: 'net.java.dev.javacc', name: 'javacc', version: '6.1.2'
     
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.9.5'
}

eclipse {
    project {    
        name = 'javacc-gradle-plugin'
    }
      
    classpath {
        defaultOutputDir = file('build-eclipse')
        downloadSources = true
        downloadJavadoc = true
    }
}

compileJava {
    options.encoding = 'UTF-8'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

test {
    maxParallelForks = 10
    forkEvery = 50
}

jar {
    manifest {
        attributes 'Implementation-Title': 'javacc-gradle-plugin', 'Implementation-Version': version
    }
}

checkstyle {
    configFile = file("${project.projectDir}/config/checkstyle/checks.xml")
}

findbugs {
    sourceSets = [sourceSets.main, sourceSets.test]
    effort = "min"
    ignoreFailures = true
    reportLevel = "high"
    excludeFilter = file("${project.projectDir}/config/findbugs/exclude.xml")
}

tasks.withType(FindBugs) {
    maxHeapSize = project.hasProperty('findBugsHeapSize') ? project.findBugsHeapSize : '1g'
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) { 
     classifier = 'javadoc' 
     from javadoc.destinationDir 
} 

artifacts {
    archives sourceJar
    archives javadocJar
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.1'
}