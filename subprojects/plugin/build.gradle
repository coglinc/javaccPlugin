plugins {
    id 'javaccPlugin.plugin-conventions'

    id 'checkstyle'
    id 'com.github.spotbugs' version '4.7.1'
    id 'jacoco'
}

defaultTasks 'clean', 'build', 'install'

sourceSets {
    acceptanceTest {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    all {
        resolutionStrategy {
            force 'org.hamcrest:hamcrest-core:1.3'
        }
    }

    acceptanceTestCompile.extendsFrom testCompile
    acceptanceTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile gradleApi()
    compile('commons-io:commons-io:2.4') {
        force = true
    }
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'org.apache.commons:commons-collections4:4.1'
    compile 'com.google.guava:guava-jdk5:17.0'

    testCompile('junit:junit:4.12') {
        force = true
    }
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'org.mockito:mockito-all:1.10.19'
    testCompile 'org.powermock:powermock-module-junit4:1.6.4'
    testCompile 'org.powermock:powermock-api-mockito:1.6.4'

    compileOnly 'net.java.dev.javacc:javacc:6.1.2'
    testRuntime 'net.java.dev.javacc:javacc:6.1.2'

    acceptanceTestCompile gradleTestKit()
    acceptanceTestCompile('commons-io:commons-io:2.4') {
        force = true
    }
}

eclipse {
    project {
        name = 'javacc-gradle-plugin'
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'javacc-gradle-plugin', 'Implementation-Version': version
    }
}

checkstyle {
    configFile = file("${rootProject.projectDir}/config/checkstyle/checks.xml")
}

spotbugs {
    toolVersion = '4.2.1'
    effort = "min"
    maxHeapSize = project.hasProperty('spotBugsHeapSize') ? project.spotBugsHeapSize : '1g'
    ignoreFailures = false
    reportLevel = "high"
    excludeFilter = file("${rootProject.projectDir}/config/findbugs/exclude.xml")
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

task acceptanceTest(type: Test) {
    mustRunAfter test

    testClassesDirs = sourceSets.acceptanceTest.output.classesDirs
    classpath = sourceSets.acceptanceTest.runtimeClasspath
}

check.dependsOn acceptanceTest

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
     classifier = 'javadoc'
     from javadoc.destinationDir
}

task testJar(type: Jar, dependsOn: testClasses) {
    classifier 'tests'
    from sourceSets.acceptanceTest.output
}

artifacts {
    archives sourceJar
    archives javadocJar
    archives testJar
}

gradlePlugin {
    plugins {
        javaccPlugin {
            id = 'ca.coglinc.javacc'
            implementationClass = 'ca.coglinc.gradle.plugins.javacc.JavaccPlugin'
        }
    }
}

pluginBundle {
    website = 'https://github.com/johnmartel/javaccPlugin'
    vcsUrl = 'https://github.com/johnmartel/javaccPlugin'
    description = 'A JavaCC plugin for Gradle'
    tags = ['javacc']

    plugins {
        javaccPlugin {
            id = 'ca.coglinc.javacc'
            displayName = 'JavaCC Plugin'
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }

            pom.withXml {
                asNode().appendNode('name', project.getName())
                asNode().appendNode('description', 'Provides the ability to use JavaCC with Gradle. Compiles JavaCC files to Java.')
                asNode().appendNode('url', 'https://github.com/johnmartel/javaccPlugin')

                def license = asNode().appendNode('licenses').appendNode('license')
                license.appendNode('name', 'The MIT License (MIT)')
                license.appendNode('url', 'http://opensource.org/licenses/MIT')
                license.appendNode('distribution', 'repo')

                def scm = asNode().appendNode('scm')
                scm.appendNode('url', 'https://github.com/johnmartel/javaccPlugin')
                scm.appendNode('connection', 'scm:https://johnmartel@github.com/johnmartel/javaccPlugin.git')
                scm.appendNode('developerConnection', 'scm:git://github.com/johnmartel/javaccPlugin.git')

                def developer = asNode().appendNode('developers').appendNode('developer')
                developer.appendNode('id', 'jmartel')
                developer.appendNode('name', 'Jonathan Martel')
                developer.appendNode('email', 'jonathan.martel@coglinc.ca')
            }
        }
    }
}

bintray {
    if (!project.hasProperty('bintrayUser')) {
        ext.bintrayUser = ''
    }

    if (!project.hasProperty('bintrayApiKey')) {
        ext.bintrayApiKey = ''
    }

    if (!project.hasProperty('ossrhUsername')) {
        ext.ossrhUsername = ''
    }

    if (!project.hasProperty('ossrhPassword')) {
        ext.ossrhPassword = ''
    }

    if (!project.hasProperty('releaseVersion')) {
        ext.releaseVersion = ''
    }

    if (!project.hasProperty('gpgPassphrase')) {
        ext.gpgPassphrase = ''
    }

    user = bintrayUser
    key = bintrayApiKey

    publications = ['maven']
    dryRun = false
    publish = true
    pkg {
        repo = 'maven'
        name = 'javacc-gradle-plugin'
        desc = 'Provides the ability to use JavaCC via Gradle. If the java plugin is also applied, JavaCompile tasks will depend upon the compileJavacc task.'
        websiteUrl = 'https://github.com/johnmartel/javaccPlugin'
        issueTrackerUrl = 'https://github.com/johnmartel/javaccPlugin/issues'
        vcsUrl = 'https://github.com/johnmartel/javaccPlugin.git'
        licenses = ['MIT']
        labels = ['javacc', 'gradle']
        publicDownloadNumbers = true

        version {
            name = releaseVersion
            released = new Date()
            vcsTag = 'javacc-gradle-plugin-' + releaseVersion
            attributes = ['gradle-plugin': 'ca.coglinc.javacc:ca.coglinc:javacc-gradle-plugin']
            gpg {
                sign = true
                passphrase = gpgPassphrase
            }
            mavenCentralSync {
                sync = true
                user = ossrhUsername
                password = ossrhPassword
                close = '1'
            }
        }
    }
}
